import { __extends, __read, __spread } from 'tslib';
import { Injectable, Directive, Input, ElementRef, Optional, ChangeDetectorRef, Pipe, NgModule } from '@angular/core';
import { of, empty, timer, Subject } from 'rxjs';
import { expand, skip, filter } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function isDefined(value) {
    return typeof value !== 'undefined' && value !== null;
}
/**
 * @param {?} value
 * @return {?}
 */
function coerceBooleanProperty(value) {
    return value != null && "" + value !== 'false';
}
/**
 * @param {?} date
 * @return {?}
 */
function dateParser(date) {
    var /** @type {?} */ parsed = new Date(date);
    if (!Number.isNaN(parsed.valueOf())) {
        return parsed;
    }
    var /** @type {?} */ parts = String(date).match(/\d+/g);
    if (parts === null || parts.length <= 2) {
        return parsed;
    }
    else {
        var _a = __read(parts.map(function (x) { return parseInt(x, 10); })), firstP = _a[0], secondP = _a[1], restPs = _a.slice(2);
        return new Date(Date.UTC.apply(Date, __spread([firstP, secondP - 1], restPs)));
    }
}
var /** @type {?} */ MINUTE = 60;
var /** @type {?} */ HOUR = MINUTE * 60;
var /** @type {?} */ DAY = HOUR * 24;
var /** @type {?} */ WEEK = DAY * 7;
var /** @type {?} */ MONTH = DAY * 30;
var /** @type {?} */ YEAR = DAY * 365;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
var  /**
 * @abstract
 */
TimeagoClock = /** @class */ (function () {
    function TimeagoClock() {
    }
    return TimeagoClock;
}());
var TimeagoDefaultClock = /** @class */ (function (_super) {
    __extends(TimeagoDefaultClock, _super);
    function TimeagoDefaultClock() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} then
     * @return {?}
     */
    TimeagoDefaultClock.prototype.tick = /**
     * @param {?} then
     * @return {?}
     */
    function (then) {
        return of(0)
            .pipe(expand(function () {
            var /** @type {?} */ now = Date.now();
            var /** @type {?} */ seconds = Math.round(Math.abs(now - then) / 1000);
            var /** @type {?} */ period = seconds < MINUTE
                ? 1000
                : seconds < HOUR
                    ? 1000 * MINUTE
                    : seconds < DAY
                        ? 1000 * HOUR
                        : 0;
            return period ? timer(period) : empty();
        }), skip(1));
    };
    TimeagoDefaultClock.decorators = [
        { type: Injectable },
    ];
    return TimeagoDefaultClock;
}(TimeagoClock));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * To modify the text displayed, create a new instance of TimeagoIntl and
 * include it in a custom provider
 */
var TimeagoIntl = /** @class */ (function () {
    function TimeagoIntl() {
        /**
         * Stream that emits whenever the l10n strings are changed
         * Use this to notify directives if the l10n strings have changed after initialization.
         */
        this.changes = new Subject();
    }
    TimeagoIntl.decorators = [
        { type: Injectable },
    ];
    return TimeagoIntl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ defaultFormattter = function (then) {
    var /** @type {?} */ now = Date.now();
    var /** @type {?} */ seconds = Math.round(Math.abs(now - then) / 1000);
    var /** @type {?} */ suffix = then < now ? 'ago' : 'from now';
    var _a = __read(seconds < MINUTE
        ? [Math.round(seconds), 'second']
        : seconds < HOUR
            ? [Math.round(seconds / MINUTE), 'minute']
            : seconds < DAY
                ? [Math.round(seconds / HOUR), 'hour']
                : seconds < WEEK
                    ? [Math.round(seconds / DAY), 'day']
                    : seconds < MONTH
                        ? [Math.round(seconds / WEEK), 'week']
                        : seconds < YEAR
                            ? [Math.round(seconds / MONTH), 'month']
                            : [Math.round(seconds / YEAR), 'year'], 2), value = _a[0], unit = _a[1];
    return { value: value, unit: unit, suffix: suffix };
};
/**
 * @abstract
 */
var  /**
 * @abstract
 */
TimeagoFormatter = /** @class */ (function () {
    function TimeagoFormatter() {
    }
    return TimeagoFormatter;
}());
var TimeagoDefaultFormatter = /** @class */ (function (_super) {
    __extends(TimeagoDefaultFormatter, _super);
    function TimeagoDefaultFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} then
     * @return {?}
     */
    TimeagoDefaultFormatter.prototype.format = /**
     * @param {?} then
     * @return {?}
     */
    function (then) {
        var _a = defaultFormattter(then), suffix = _a.suffix, value = _a.value, unit = _a.unit;
        return this.parse(value, unit, suffix);
    };
    /**
     * @param {?} value
     * @param {?} unit
     * @param {?} suffix
     * @return {?}
     */
    TimeagoDefaultFormatter.prototype.parse = /**
     * @param {?} value
     * @param {?} unit
     * @param {?} suffix
     * @return {?}
     */
    function (value, unit, suffix) {
        if (value !== 1) {
            unit += 's';
        }
        return value + ' ' + unit + ' ' + suffix;
    };
    TimeagoDefaultFormatter.decorators = [
        { type: Injectable },
    ];
    return TimeagoDefaultFormatter;
}(TimeagoFormatter));
var TimeagoCustomFormatter = /** @class */ (function (_super) {
    __extends(TimeagoCustomFormatter, _super);
    function TimeagoCustomFormatter(intl) {
        var _this = _super.call(this) || this;
        _this.intl = intl;
        return _this;
    }
    /**
     * @param {?} then
     * @return {?}
     */
    TimeagoCustomFormatter.prototype.format = /**
     * @param {?} then
     * @return {?}
     */
    function (then) {
        var _a = defaultFormattter(then), suffix = _a.suffix, value = _a.value, unit = _a.unit;
        return this.parse(value, unit, suffix, Date.now(), then);
    };
    /**
     * @param {?} value
     * @param {?} unit
     * @param {?} suffix
     * @param {?} now
     * @param {?} then
     * @return {?}
     */
    TimeagoCustomFormatter.prototype.parse = /**
     * @param {?} value
     * @param {?} unit
     * @param {?} suffix
     * @param {?} now
     * @param {?} then
     * @return {?}
     */
    function (value, unit, suffix, now, then) {
        /** convert weeks to days if strings don't handle weeks */
        if (unit === 'week' && !this.intl.strings.week && !this.intl.strings.weeks) {
            var /** @type {?} */ days = Math.round(Math.abs(now - then) / (1000 * 60 * 60 * 24));
            value = days;
            unit = 'day';
        }
        /**
         * create a normalize function for given value
         */
        var /** @type {?} */ normalize = this.normalizeFn(value, now - then, this.intl.strings.numbers);
        /**
         * The eventual return value stored in an array so that the wordSeparator can be used
         */
        var /** @type {?} */ dateString = [];
        /** handle prefixes */
        if (suffix === 'ago' && this.intl.strings.prefixAgo) {
            dateString.push(normalize(this.intl.strings.prefixAgo));
        }
        if (suffix === 'from now' && this.intl.strings.prefixFromNow) {
            dateString.push(normalize(this.intl.strings.prefixFromNow));
        }
        /**
         * Handle Main number and unit
         */
        var /** @type {?} */ isPlural = value > 1;
        if (isPlural) {
            var /** @type {?} */ stringFn = this.intl.strings[unit + 's'] || this.intl.strings[unit] || '%d ' + unit;
            dateString.push(normalize(stringFn));
        }
        else {
            var /** @type {?} */ stringFn = this.intl.strings[unit] || this.intl.strings[unit + 's'] || '%d ' + unit;
            dateString.push(normalize(stringFn));
        }
        /** Handle Suffixes */
        if (suffix === 'ago' && this.intl.strings.suffixAgo) {
            dateString.push(normalize(this.intl.strings.suffixAgo));
        }
        if (suffix === 'from now' && this.intl.strings.suffixFromNow) {
            dateString.push(normalize(this.intl.strings.suffixFromNow));
        }
        /**
         * join the array into a string and return it
         */
        var /** @type {?} */ wordSeparator = typeof this.intl.strings.wordSeparator === 'string' ? this.intl.strings.wordSeparator : ' ';
        return dateString.join(wordSeparator);
    };
    /**
     * If the numbers array is present, format numbers with it,
     * otherwise just cast the number to a string and return it
     * @param {?} numbers
     * @param {?} value
     * @return {?}
     */
    TimeagoCustomFormatter.prototype.normalizeNumber = /**
     * If the numbers array is present, format numbers with it,
     * otherwise just cast the number to a string and return it
     * @param {?} numbers
     * @param {?} value
     * @return {?}
     */
    function (numbers, value) {
        return numbers && numbers.length === 10
            ? String(value).split('')
                .map(function (digit) { return digit.match(/^[0-9]$/) ? numbers[parseInt(digit, 10)] : digit; })
                .join('')
            : String(value);
    };
    /**
     * Take a string or a function that takes number of days and returns a string
     * and provide a uniform API to create string parts
     * @param {?} value
     * @param {?} millisDelta
     * @param {?=} numbers
     * @return {?}
     */
    TimeagoCustomFormatter.prototype.normalizeFn = /**
     * Take a string or a function that takes number of days and returns a string
     * and provide a uniform API to create string parts
     * @param {?} value
     * @param {?} millisDelta
     * @param {?=} numbers
     * @return {?}
     */
    function (value, millisDelta, numbers) {
        var _this = this;
        return function (stringOrFn) {
            return typeof stringOrFn === 'function'
                ? stringOrFn(value, millisDelta).replace(/%d/g, _this.normalizeNumber(numbers, value))
                : stringOrFn.replace(/%d/g, _this.normalizeNumber(numbers, value));
        };
    };
    TimeagoCustomFormatter.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    TimeagoCustomFormatter.ctorParameters = function () { return [
        { type: TimeagoIntl }
    ]; };
    return TimeagoCustomFormatter;
}(TimeagoFormatter));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TimeagoDirective = /** @class */ (function () {
    function TimeagoDirective(intl, cd, formatter, element, clock) {
        var _this = this;
        this.cd = cd;
        this.clock = clock;
        /**
         * Emits on:
         * - Input change
         * - Intl change
         * - Clock tick
         */
        this.stateChanges = new Subject();
        this._live = true;
        if (intl) {
            this.intlSubscription = intl.changes.subscribe(function () { return _this.stateChanges.next(); });
        }
        this.stateChanges.subscribe(function () {
            _this.setContent(element.nativeElement, formatter.format(_this.date));
            _this.cd.markForCheck();
        });
    }
    Object.defineProperty(TimeagoDirective.prototype, "date", {
        /** The Date to display. An actual Date object or something that can be fed to new Date. */
        get: /**
         * The Date to display. An actual Date object or something that can be fed to new Date.
         * @return {?}
         */
        function () {
            return this._date;
        },
        set: /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            var _this = this;
            this._date = dateParser(date).valueOf();
            if (this._date) {
                if (this.clockSubscription) {
                    this.clockSubscription.unsubscribe();
                    this.clockSubscription = undefined;
                }
                this.clockSubscription = this.clock.tick(date)
                    .pipe(filter(function () { return _this.live; }, this))
                    .subscribe(function () { return _this.stateChanges.next(); });
            }
            else {
                throw new SyntaxError("Wrong parameter in TimeagoDirective. Expected a valid date, received: " + date);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeagoDirective.prototype, "live", {
        /** If the directive should update itself over time */
        get: /**
         * If the directive should update itself over time
         * @return {?}
         */
        function () {
            return this._live;
        },
        set: /**
         * @param {?} live
         * @return {?}
         */
        function (live) {
            this._live = coerceBooleanProperty(live);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    TimeagoDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.stateChanges.next();
    };
    /**
     * @param {?} node
     * @param {?} content
     * @return {?}
     */
    TimeagoDirective.prototype.setContent = /**
     * @param {?} node
     * @param {?} content
     * @return {?}
     */
    function (node, content) {
        if (isDefined(node.textContent)) {
            node.textContent = content;
        }
        else {
            node.data = content;
        }
    };
    /**
     * @return {?}
     */
    TimeagoDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.intlSubscription) {
            this.intlSubscription.unsubscribe();
            this.intlSubscription = undefined;
        }
        if (this.clockSubscription) {
            this.clockSubscription.unsubscribe();
            this.clockSubscription = undefined;
        }
        this.stateChanges.complete();
    };
    TimeagoDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[timeago]',
                    exportAs: 'timeago',
                },] },
    ];
    /** @nocollapse */
    TimeagoDirective.ctorParameters = function () { return [
        { type: TimeagoIntl, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef },
        { type: TimeagoFormatter },
        { type: ElementRef },
        { type: TimeagoClock }
    ]; };
    TimeagoDirective.propDecorators = {
        date: [{ type: Input }],
        live: [{ type: Input }]
    };
    return TimeagoDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TimeagoPipe = /** @class */ (function () {
    function TimeagoPipe(intl, cd, formatter, clock) {
        var _this = this;
        this.formatter = formatter;
        this.clock = clock;
        this.live = true;
        /**
         * Emits on:
         * - Input change
         * - Intl change
         * - Clock tick
         */
        this.stateChanges = new Subject();
        if (intl) {
            this.intlSubscription = intl.changes.subscribe(function () { return _this.stateChanges.next(); });
        }
        this.stateChanges.subscribe(function () {
            _this.value = formatter.format(_this.date);
            cd.markForCheck();
        });
    }
    /**
     * @param {?} date
     * @param {...?} args
     * @return {?}
     */
    TimeagoPipe.prototype.transform = /**
     * @param {?} date
     * @param {...?} args
     * @return {?}
     */
    function (date) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var /** @type {?} */ _date = dateParser(date).valueOf();
        var /** @type {?} */ _live;
        _live = isDefined(args[0])
            ? coerceBooleanProperty(args[0])
            : this.live;
        if (this.date === _date && this.live === _live) {
            return this.value;
        }
        this.date = _date;
        this.live = _live;
        if (this.date) {
            if (this.clockSubscription) {
                this.clockSubscription.unsubscribe();
                this.clockSubscription = undefined;
            }
            this.clockSubscription = this.clock.tick(date)
                .pipe(filter(function () { return _this.live; }, this))
                .subscribe(function () { return _this.stateChanges.next(); });
            this.stateChanges.next();
        }
        else {
            throw new SyntaxError("Wrong parameter in TimeagoPipe. Expected a valid date, received: " + date);
        }
        return this.value;
    };
    /**
     * @return {?}
     */
    TimeagoPipe.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.intlSubscription) {
            this.intlSubscription.unsubscribe();
            this.intlSubscription = undefined;
        }
        if (this.clockSubscription) {
            this.clockSubscription.unsubscribe();
            this.clockSubscription = undefined;
        }
        this.stateChanges.complete();
    };
    TimeagoPipe.decorators = [
        { type: Injectable },
        { type: Pipe, args: [{
                    name: 'timeago',
                    pure: false,
                },] },
    ];
    /** @nocollapse */
    TimeagoPipe.ctorParameters = function () { return [
        { type: TimeagoIntl, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef },
        { type: TimeagoFormatter },
        { type: TimeagoClock }
    ]; };
    return TimeagoPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TimeagoModule = /** @class */ (function () {
    function TimeagoModule() {
    }
    /**
     * Use this method in your root module to provide the TimeagoModule
     */
    /**
     * Use this method in your root module to provide the TimeagoModule
     * @param {?=} config
     * @return {?}
     */
    TimeagoModule.forRoot = /**
     * Use this method in your root module to provide the TimeagoModule
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: TimeagoModule,
            providers: [
                config.clock || { provide: TimeagoClock, useClass: TimeagoDefaultClock },
                config.intl || [],
                config.formatter || { provide: TimeagoFormatter, useClass: TimeagoDefaultFormatter },
            ],
        };
    };
    /**
     * Use this method in your other (non root) modules to import the directive/pipe
     */
    /**
     * Use this method in your other (non root) modules to import the directive/pipe
     * @param {?=} config
     * @return {?}
     */
    TimeagoModule.forChild = /**
     * Use this method in your other (non root) modules to import the directive/pipe
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: TimeagoModule,
            providers: [
                config.clock || { provide: TimeagoClock, useClass: TimeagoDefaultClock },
                config.intl || [],
                config.formatter || { provide: TimeagoFormatter, useClass: TimeagoDefaultFormatter },
            ],
        };
    };
    TimeagoModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        TimeagoDirective,
                        TimeagoPipe,
                    ],
                    exports: [
                        TimeagoDirective,
                        TimeagoPipe,
                    ],
                },] },
    ];
    return TimeagoModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { TimeagoDirective, TimeagoPipe, TimeagoIntl, TimeagoClock, TimeagoDefaultClock, TimeagoFormatter, TimeagoDefaultFormatter, TimeagoCustomFormatter, TimeagoModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,