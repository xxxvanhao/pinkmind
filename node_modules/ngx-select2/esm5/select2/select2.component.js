/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, ElementRef, forwardRef, Input, Output, EventEmitter, Renderer } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
var LSelect2Component = /** @class */ (function () {
    function LSelect2Component(_renderer) {
        this._renderer = _renderer;
        this.options = {};
        this.required = false;
        this.maxCount = Number.MAX_SAFE_INTEGER;
        this.minCount = Number.MIN_SAFE_INTEGER;
        this.valueChange = new EventEmitter();
        this._onChange = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) { });
        this._onTouched = (/**
         * @return {?}
         */
        function () { });
    }
    /**
     * @return {?}
     */
    LSelect2Component.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    LSelect2Component.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._jqueryElement = $(this.selectControll.nativeElement);
        this.initSelect2();
        this._jqueryElement.on('select2:select select2:unselect', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            var e_1, _a;
            /** @type {?} */
            var data = _this._jqueryElement.select2('data');
            try {
                for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                    var item = data_1_1.value;
                    delete item.element;
                    delete item.disabled;
                    delete item.selected;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (!_this.options.multiple) {
                data = (e.type == 'select2:unselect') ? null : data[0];
            }
            _this.selectedValue = data;
            _this._onChange(data);
            _this.valueChange.emit(data);
        }));
        if (this.selectedValue) {
            this.setSelect2Value(this.selectedValue);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    LSelect2Component.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!this._jqueryElement)
            return;
        if (this.hasChanged(changes)) {
            this.initSelect2();
            if (this.selectedValue) {
                this.setSelect2Value(this.selectedValue);
            }
        }
    };
    /**
     * @return {?}
     */
    LSelect2Component.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._jqueryElement.select2('destroy');
    };
    /**
     * @param {?} value
     * @return {?}
     */
    LSelect2Component.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.selectedValue = value;
        if (value !== null && value !== undefined)
            this.setSelect2Value(value);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    LSelect2Component.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    LSelect2Component.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    LSelect2Component.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @param {?} c
     * @return {?}
     */
    LSelect2Component.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        if (this.disabled) {
            return null;
        }
        /** @type {?} */
        var length = this.selectedValue ? this.selectedValue.length : 0;
        if (this.required === true && length === 0) {
            return { required: true };
        }
        if (this.minCount > 0 && length < this.minCount) {
            return { minCount: true };
        }
        if (this.maxCount > 0 && length > this.maxCount) {
            return { maxCount: true };
        }
        return null;
    };
    /**
     * @return {?}
     */
    LSelect2Component.prototype.initSelect2 = /**
     * @return {?}
     */
    function () {
        if (this._jqueryElement.hasClass('select2-hidden-accessible') == true) {
            this._jqueryElement.select2('destroy');
            this._renderer.setElementProperty(this.selectControll.nativeElement, 'innerHTML', '');
        }
        /** @type {?} */
        var options = {
            data: this.data
        };
        Object.assign(options, this.options);
        this._jqueryElement.select2(options);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    LSelect2Component.prototype.setSelect2Value = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!this._jqueryElement || !value) {
            this.selectedValue = value;
            return;
        }
        ;
        /** @type {?} */
        var targetVal = value['id'] || value;
        if (Array.isArray(value)) {
            targetVal = value.map((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x['id']; }));
        }
        this._jqueryElement.val(targetVal).trigger('change');
    };
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    LSelect2Component.prototype.hasChanged = /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['data'] && JSON.stringify(changes['data'].previousValue) !== JSON.stringify(changes['data'].currentValue)) {
            return true;
        }
        if (changes['options'] && JSON.stringify(changes['options'].previousValue) !== JSON.stringify(changes['options'].currentValue)) {
            return true;
        }
        return false;
    };
    LSelect2Component.decorators = [
        { type: Component, args: [{
                    selector: 'l-select2',
                    template: "<select #selectControll [disabled]=\"disabled\" style=\"width: 100%\">\r\n  <ng-content select=\"option, optgroup\">\r\n  </ng-content>\r\n</select>",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return LSelect2Component; })),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return LSelect2Component; })),
                            multi: true
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    LSelect2Component.ctorParameters = function () { return [
        { type: Renderer }
    ]; };
    LSelect2Component.propDecorators = {
        selectControll: [{ type: ViewChild, args: ['selectControll',] }],
        data: [{ type: Input }],
        disabled: [{ type: Input }],
        options: [{ type: Input }],
        required: [{ type: Input }],
        maxCount: [{ type: Input }],
        minCount: [{ type: Input }],
        valueChange: [{ type: Output }]
    };
    return LSelect2Component;
}());
export { LSelect2Component };
if (false) {
    /** @type {?} */
    LSelect2Component.prototype.selectControll;
    /** @type {?} */
    LSelect2Component.prototype.data;
    /** @type {?} */
    LSelect2Component.prototype.disabled;
    /** @type {?} */
    LSelect2Component.prototype.options;
    /** @type {?} */
    LSelect2Component.prototype.required;
    /** @type {?} */
    LSelect2Component.prototype.maxCount;
    /** @type {?} */
    LSelect2Component.prototype.minCount;
    /** @type {?} */
    LSelect2Component.prototype.valueChange;
    /** @type {?} */
    LSelect2Component.prototype.selectedValue;
    /**
     * @type {?}
     * @private
     */
    LSelect2Component.prototype._jqueryElement;
    /**
     * @type {?}
     * @private
     */
    LSelect2Component.prototype._onChange;
    /**
     * @type {?}
     * @private
     */
    LSelect2Component.prototype._onTouched;
    /**
     * @type {?}
     * @private
     */
    LSelect2Component.prototype._renderer;
}
//# sourceMappingURL=data:application/json;base64,