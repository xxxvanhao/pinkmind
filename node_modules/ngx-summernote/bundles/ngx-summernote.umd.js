(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common/http'), require('@angular/core'), require('@angular/forms'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-summernote', ['exports', '@angular/common/http', '@angular/core', '@angular/forms', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global['ngx-summernote'] = {}),global.ng.common.http,global.ng.core,global.ng.forms,global.rxjs,global.rxjs.operators));
}(this, (function (exports,http,core,forms,rxjs,operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxSummernoteDirective = /** @class */ (function () {
        function NgxSummernoteDirective(el, zone, http$$1) {
            var _this = this;
            this.zone = zone;
            this.http = http$$1;
            // summernoteModel directive as output: update model if editor contentChanged
            this.summernoteModelChange = new core.EventEmitter();
            this.imageUpload = new core.EventEmitter();
            // summernoteInit directive as output: send manual editor initialization
            this.summernoteInit = new core.EventEmitter();
            this.blur = new core.EventEmitter();
            this._options = {
                immediateAngularModelUpdate: false,
                angularIgnoreAttrs: null,
                placeholder: '',
                tabsize: 2,
                height: 100,
                uploadImagePath: '',
                toolbar: [
                    // [groupName, [list of button]]
                    ['misc', ['codeview', 'undo', 'redo', 'codeBlock']],
                    // ['style', ['bold', 'italic', 'underline', 'clear']],
                    ['font', ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'clear']],
                    ['fontsize', ['fontname', 'fontsize', 'color']],
                    ['para', ['style0', 'ul', 'ol', 'paragraph', 'height']],
                    ['insert', ['table', 'picture', 'link', 'video', 'hr']],
                ],
                fontNames: ['Helvetica', 'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New', 'Roboto', 'Times'],
                callbacks: {
                    onImageUpload: function (files) { return _this.uploadImage(files); }
                },
                buttons: {
                    codeBlock: this.codeBlockButton()
                }
            };
            this.SPECIAL_TAGS = ['img', 'button', 'input', 'a'];
            this.INNER_HTML_ATTR = 'innerHTML';
            this._oldModel = null;
            // Begin ControlValueAccesor methods.
            this.onChange = function (_) { };
            this.onTouched = function () { };
            /** @type {?} */
            var element = el.nativeElement;
            // check if the element is a special tag
            if (this.SPECIAL_TAGS.indexOf(element.tagName.toLowerCase()) !== -1) {
                this._hasSpecialTag = true;
            }
            // jquery wrap and store element
            this._$element = (( /** @type {?} */($(element))));
            this.zone = zone;
        }
        Object.defineProperty(NgxSummernoteDirective.prototype, "ngxSummernote", {
            set: /**
             * @param {?} options
             * @return {?}
             */ function (options) {
                if (options.buttons) {
                    Object.assign(options.buttons, this._options.buttons);
                }
                this._options = Object.assign(this._options, options);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxSummernoteDirective.prototype, "summernoteModel", {
            // summernoteModel directive as input: store initial editor content
            set: 
            // summernoteModel directive as input: store initial editor content
            /**
             * @param {?} content
             * @return {?}
             */
            function (content) {
                this.updateEditor(content);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgxSummernoteDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this._options.toolbar;
                // check if output summernoteInit is present. Maybe observers is private and
                // should not be used?? TODO how to better test that an output directive is present.
                if (!this.summernoteInit.observers.length) {
                    this.createEditor();
                }
                else {
                    // TODO not sure it works now...
                    this.generateManualController();
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NgxSummernoteDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (this._editorInitialized && changes) {
                    if (changes.ngxSummernoteDisabled && !changes.ngxSummernoteDisabled.firstChange &&
                        changes.ngxSummernoteDisabled.currentValue !== changes.ngxSummernoteDisabled.previousValue) {
                        if (changes.ngxSummernoteDisabled.currentValue) {
                            this._$element.summernote('disable');
                        }
                        else {
                            this._$element.summernote('enable');
                        }
                    }
                }
            };
        /**
         * @return {?}
         */
        NgxSummernoteDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.destroyEditor();
            };
        // Form model content changed.
        // Form model content changed.
        /**
         * @param {?} content
         * @return {?}
         */
        NgxSummernoteDirective.prototype.writeValue =
            // Form model content changed.
            /**
             * @param {?} content
             * @return {?}
             */
            function (content) {
                this.updateEditor(content);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NgxSummernoteDirective.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) { this.onChange = fn; };
        /**
         * @param {?} fn
         * @return {?}
         */
        NgxSummernoteDirective.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) { this.onTouched = fn; };
        // Update editor with model contents.
        // Update editor with model contents.
        /**
         * @private
         * @param {?} content
         * @return {?}
         */
        NgxSummernoteDirective.prototype.updateEditor =
            // Update editor with model contents.
            /**
             * @private
             * @param {?} content
             * @return {?}
             */
            function (content) {
                if (JSON.stringify(this._oldModel) === JSON.stringify(content)) {
                    return;
                }
                this._oldModel = content;
                this._$element.html(content);
                if (this._editorInitialized) {
                    this._$element.summernote('code', content);
                }
                else {
                    this._$element.html(content);
                }
            };
        // update model if editor contentChanged
        // update model if editor contentChanged
        /**
         * @private
         * @param {?=} content
         * @return {?}
         */
        NgxSummernoteDirective.prototype.updateModel =
            // update model if editor contentChanged
            /**
             * @private
             * @param {?=} content
             * @return {?}
             */
            function (content) {
                var _this = this;
                // console.log("update model", content)
                this.zone.run(function () {
                    /** @type {?} */
                    var modelContent = null;
                    if (_this._hasSpecialTag) {
                        /** @type {?} */
                        var attributeNodes = _this._$element[0].attributes;
                        /** @type {?} */
                        var attrs = {};
                        for (var i = 0; i < attributeNodes.length; i++) {
                            /** @type {?} */
                            var attrName = attributeNodes[i].name;
                            if (_this._options.angularIgnoreAttrs && _this._options.angularIgnoreAttrs.indexOf(attrName) !== -1) {
                                continue;
                            }
                            attrs[attrName] = attributeNodes[i].value;
                        }
                        if (_this._$element[0].innerHTML) {
                            attrs[_this.INNER_HTML_ATTR] = _this._$element[0].innerHTML;
                        }
                        modelContent = attrs;
                    }
                    else {
                        /** @type {?} */
                        var returnedHtml = content || '';
                        if (typeof returnedHtml === 'string') {
                            modelContent = returnedHtml;
                        }
                    }
                    _this._oldModel = modelContent;
                    // Update summernoteModel
                    _this.summernoteModelChange.emit(modelContent);
                    // Update form model.
                    _this.onChange(content);
                });
            };
        /**
         * @private
         * @return {?}
         */
        NgxSummernoteDirective.prototype.initListeners = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var self = this;
                if (!this._$element) {
                    return;
                }
                this._$element.on('summernote.init', function () {
                    setTimeout(function () {
                        self.updateModel();
                    }, 0);
                });
                this._$element.on('summernote.change', function (event, contents, $editable) {
                    setTimeout(function () {
                        self.updateModel(contents);
                    }, 0);
                });
                this._$element.on('summernote.blur', function () {
                    setTimeout(function () {
                        self.onTouched();
                        self.blur.emit();
                    }, 0);
                });
                if (this._options.immediateAngularModelUpdate) {
                    this._editor.on('keyup', function () {
                        setTimeout(function () {
                            self.updateModel();
                        }, 0);
                    });
                }
            };
        /**
         * @private
         * @return {?}
         */
        NgxSummernoteDirective.prototype.createEditor = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this._editorInitialized) {
                    return;
                }
                this.setContent(true);
                // this.initListeners(); // issue #31 
                // init editor
                this.zone.runOutsideAngular(function () {
                    _this._editor = _this._$element.summernote(_this._options).data('summernote').$note;
                    _this.initListeners(); // issue #31
                    if (_this.ngxSummernoteDisabled) {
                        _this._$element.summernote('disable');
                    }
                });
                this._editorInitialized = true;
            };
        /**
         * @private
         * @return {?}
         */
        NgxSummernoteDirective.prototype.setHtml = /**
         * @private
         * @return {?}
         */
            function () {
                this._$element.summernote('code', this._model || '', true);
            };
        /**
         * @private
         * @param {?=} firstTime
         * @return {?}
         */
        NgxSummernoteDirective.prototype.setContent = /**
         * @private
         * @param {?=} firstTime
         * @return {?}
         */
            function (firstTime) {
                if (firstTime === void 0) {
                    firstTime = false;
                }
                // console.log("set content", firstTime, this._oldModel, this._model)
                /** @type {?} */
                var self = this;
                // Set initial content
                if (this._model || this._model === '') {
                    this._oldModel = this._model;
                    if (this._hasSpecialTag) {
                        /** @type {?} */
                        var tags = this._model;
                        // add tags on element
                        if (tags) {
                            for (var attr in tags) {
                                if (tags.hasOwnProperty(attr) && attr !== this.INNER_HTML_ATTR) {
                                    this._$element.attr(attr, tags[attr]);
                                }
                            }
                            if (tags.hasOwnProperty(this.INNER_HTML_ATTR)) {
                                this._$element[0].innerHTML = tags[this.INNER_HTML_ATTR];
                            }
                        }
                    }
                    else {
                        self.setHtml();
                    }
                }
            };
        /**
         * @private
         * @return {?}
         */
        NgxSummernoteDirective.prototype.destroyEditor = /**
         * @private
         * @return {?}
         */
            function () {
                if (this._editorInitialized) {
                    this._editor.off('keyup');
                    this._$element.summernote('destroy'); // TODO not sure it works now...
                    this._editorInitialized = false;
                }
            };
        /**
         * @private
         * @return {?}
         */
        NgxSummernoteDirective.prototype.getEditor = /**
         * @private
         * @return {?}
         */
            function () {
                if (this._$element) {
                    return this._$element.summernote.bind(this._$element);
                }
                return null;
            };
        // send manual editor initialization
        // TODO not sure it works now...
        // send manual editor initialization
        // TODO not sure it works now...
        /**
         * @private
         * @return {?}
         */
        NgxSummernoteDirective.prototype.generateManualController =
            // send manual editor initialization
            // TODO not sure it works now...
            /**
             * @private
             * @return {?}
             */
            function () {
                /** @type {?} */
                var controls = {
                    initialize: this.createEditor.bind(this),
                    destroy: this.destroyEditor.bind(this),
                    getEditor: this.getEditor.bind(this),
                };
                this.summernoteInit.emit(controls);
            };
        /**
         * @private
         * @param {?} files
         * @return {?}
         */
        NgxSummernoteDirective.prototype.uploadImage = /**
         * @private
         * @param {?} files
         * @return {?}
         */
            function (files) {
                return __awaiter(this, void 0, void 0, function () {
                    var data;
                    var _this = this;
                    return __generator(this, function (_a) {
                        data = new FormData();
                        this.imageUpload.emit({ uploading: true });
                        data.append('image', files[0]);
                        if (this._options.uploadImagePath) {
                            this.http.post(this._options.uploadImagePath, data)
                                .pipe(operators.map(function (response) { return response && typeof response.path === 'string' && response.path; }), operators.catchError(function (e) {
                                rxjs.throwError('An error occured while uploading' + e);
                                return rxjs.of('');
                            }))
                                .subscribe(function (dataIn) {
                                if (dataIn) {
                                    _this._$element.summernote('insertImage', dataIn);
                                    _this.imageUpload.emit({ uploading: false });
                                }
                                else {
                                    _this.insertFromDataURL(files);
                                }
                            }, function (e) {
                                _this.insertFromDataURL(files);
                            });
                        }
                        else {
                            this.insertFromDataURL(files);
                        }
                        return [2 /*return*/];
                    });
                });
            };
        /**
         * @param {?} files
         * @return {?}
         */
        NgxSummernoteDirective.prototype.insertFromDataURL = /**
         * @param {?} files
         * @return {?}
         */
            function (files) {
                var _this = this;
                /** @type {?} */
                var reader = new FileReader();
                reader.readAsDataURL(files[0]);
                reader.onload = function () {
                    _this._$element.summernote('insertImage', reader.result);
                    _this.imageUpload.emit({ uploading: false, encoding: 'base64' });
                };
                reader.onerror = function (error) { return console.error(error); };
            };
        /**
         * @private
         * @return {?}
         */
        NgxSummernoteDirective.prototype.codeBlockButton = /**
         * @private
         * @return {?}
         */
            function () {
                return function (context) {
                    /** @type {?} */
                    var ui = $.summernote.ui;
                    // create button
                    /** @type {?} */
                    var button = ui.button({
                        contents: 'Code block',
                        tooltip: 'Add raw code',
                        click: function () {
                            /** @type {?} */
                            var selectedText = null;
                            // The below code will copy the selected block and add it into our code=block
                            if (window.getSelection) {
                                selectedText = window.getSelection().toString().replace(/^\s+|\s+$/g, '');
                            }
                            /** @type {?} */
                            var codeText = selectedText ? selectedText : "Place your code here.";
                            /** @type {?} */
                            var codeBlock = "<pre class=\"code-block\" style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 12px; padding: 14px 12px; margin-bottom: 10px; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: rgb(250, 251, 253); border: 1px solid rgb(234, 236, 240); border-radius: 4px; color: #60a0b0\"><span style=\"white-space: pre-wrap;\">" + codeText + "</span></pre>";
                            context.invoke('editor.pasteHTML', codeBlock);
                        }
                    });
                    return button.render(); // return button as jquery object
                };
            };
        NgxSummernoteDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: '[ngxSummernote]',
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return NgxSummernoteDirective; }),
                                multi: true
                            }]
                    },] },
        ];
        /** @nocollapse */
        NgxSummernoteDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.NgZone },
                { type: http.HttpClient }
            ];
        };
        NgxSummernoteDirective.propDecorators = {
            ngxSummernote: [{ type: core.Input }],
            summernoteModel: [{ type: core.Input }],
            summernoteModelChange: [{ type: core.Output }],
            imageUpload: [{ type: core.Output }],
            summernoteInit: [{ type: core.Output }],
            blur: [{ type: core.Output }],
            ngxSummernoteDisabled: [{ type: core.Input }]
        };
        return NgxSummernoteDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxSummernoteViewDirective = /** @class */ (function () {
        function NgxSummernoteViewDirective(renderer, element) {
            this.renderer = renderer;
            this._element = element.nativeElement;
        }
        Object.defineProperty(NgxSummernoteViewDirective.prototype, "ngxSummernoteView", {
            set: /**
             * @param {?} content
             * @return {?}
             */ function (content) {
                this._element.innerHTML = content || '';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgxSummernoteViewDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.renderer.setElementClass(this._element, 'ngx-summernote-view', true);
            };
        NgxSummernoteViewDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: '[ngxSummernoteView]'
                    },] },
        ];
        /** @nocollapse */
        NgxSummernoteViewDirective.ctorParameters = function () {
            return [
                { type: core.Renderer },
                { type: core.ElementRef }
            ];
        };
        NgxSummernoteViewDirective.propDecorators = {
            ngxSummernoteView: [{ type: core.Input }]
        };
        return NgxSummernoteViewDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxSummernoteModule = /** @class */ (function () {
        function NgxSummernoteModule() {
        }
        /**
         * @return {?}
         */
        NgxSummernoteModule.forRoot = /**
         * @return {?}
         */
            function () {
                return { ngModule: NgxSummernoteModule, providers: [] };
            };
        NgxSummernoteModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            NgxSummernoteDirective,
                            NgxSummernoteViewDirective
                        ],
                        exports: [
                            NgxSummernoteDirective,
                            NgxSummernoteViewDirective
                        ]
                    },] },
        ];
        return NgxSummernoteModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgxSummernoteDirective = NgxSummernoteDirective;
    exports.NgxSummernoteViewDirective = NgxSummernoteViewDirective;
    exports.NgxSummernoteModule = NgxSummernoteModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,