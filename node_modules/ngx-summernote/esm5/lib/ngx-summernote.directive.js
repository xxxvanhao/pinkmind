/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { Directive, ElementRef, EventEmitter, forwardRef, Input, NgZone, Output, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { of, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
var NgxSummernoteDirective = /** @class */ (function () {
    function NgxSummernoteDirective(el, zone, http) {
        var _this = this;
        this.zone = zone;
        this.http = http;
        // summernoteModel directive as output: update model if editor contentChanged
        this.summernoteModelChange = new EventEmitter();
        this.imageUpload = new EventEmitter();
        // summernoteInit directive as output: send manual editor initialization
        this.summernoteInit = new EventEmitter();
        this.blur = new EventEmitter();
        this._options = {
            immediateAngularModelUpdate: false,
            angularIgnoreAttrs: null,
            placeholder: '',
            tabsize: 2,
            height: 100,
            uploadImagePath: '',
            toolbar: [
                // [groupName, [list of button]]
                ['misc', ['codeview', 'undo', 'redo', 'codeBlock']],
                // ['style', ['bold', 'italic', 'underline', 'clear']],
                ['font', ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'clear']],
                ['fontsize', ['fontname', 'fontsize', 'color']],
                ['para', ['style0', 'ul', 'ol', 'paragraph', 'height']],
                ['insert', ['table', 'picture', 'link', 'video', 'hr']],
            ],
            fontNames: ['Helvetica', 'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New', 'Roboto', 'Times'],
            callbacks: {
                onImageUpload: function (files) { return _this.uploadImage(files); }
            },
            buttons: {
                codeBlock: this.codeBlockButton()
            }
        };
        this.SPECIAL_TAGS = ['img', 'button', 'input', 'a'];
        this.INNER_HTML_ATTR = 'innerHTML';
        this._oldModel = null;
        // Begin ControlValueAccesor methods.
        this.onChange = function (_) { };
        this.onTouched = function () { };
        /** @type {?} */
        var element = el.nativeElement;
        // check if the element is a special tag
        if (this.SPECIAL_TAGS.indexOf(element.tagName.toLowerCase()) !== -1) {
            this._hasSpecialTag = true;
        }
        // jquery wrap and store element
        this._$element = ((/** @type {?} */ ($(element))));
        this.zone = zone;
    }
    Object.defineProperty(NgxSummernoteDirective.prototype, "ngxSummernote", {
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            if (options.buttons) {
                Object.assign(options.buttons, this._options.buttons);
            }
            this._options = Object.assign(this._options, options);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxSummernoteDirective.prototype, "summernoteModel", {
        // summernoteModel directive as input: store initial editor content
        set: 
        // summernoteModel directive as input: store initial editor content
        /**
         * @param {?} content
         * @return {?}
         */
        function (content) {
            this.updateEditor(content);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxSummernoteDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._options.toolbar;
        // check if output summernoteInit is present. Maybe observers is private and
        // should not be used?? TODO how to better test that an output directive is present.
        if (!this.summernoteInit.observers.length) {
            this.createEditor();
        }
        else {
            // TODO not sure it works now...
            this.generateManualController();
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxSummernoteDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this._editorInitialized && changes) {
            if (changes.ngxSummernoteDisabled && !changes.ngxSummernoteDisabled.firstChange &&
                changes.ngxSummernoteDisabled.currentValue !== changes.ngxSummernoteDisabled.previousValue) {
                if (changes.ngxSummernoteDisabled.currentValue) {
                    this._$element.summernote('disable');
                }
                else {
                    this._$element.summernote('enable');
                }
            }
        }
    };
    /**
     * @return {?}
     */
    NgxSummernoteDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyEditor();
    };
    // Form model content changed.
    // Form model content changed.
    /**
     * @param {?} content
     * @return {?}
     */
    NgxSummernoteDirective.prototype.writeValue = 
    // Form model content changed.
    /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        this.updateEditor(content);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgxSummernoteDirective.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onChange = fn; };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgxSummernoteDirective.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onTouched = fn; };
    // Update editor with model contents.
    // Update editor with model contents.
    /**
     * @private
     * @param {?} content
     * @return {?}
     */
    NgxSummernoteDirective.prototype.updateEditor = 
    // Update editor with model contents.
    /**
     * @private
     * @param {?} content
     * @return {?}
     */
    function (content) {
        if (JSON.stringify(this._oldModel) === JSON.stringify(content)) {
            return;
        }
        this._oldModel = content;
        this._$element.html(content);
        if (this._editorInitialized) {
            this._$element.summernote('code', content);
        }
        else {
            this._$element.html(content);
        }
    };
    // update model if editor contentChanged
    // update model if editor contentChanged
    /**
     * @private
     * @param {?=} content
     * @return {?}
     */
    NgxSummernoteDirective.prototype.updateModel = 
    // update model if editor contentChanged
    /**
     * @private
     * @param {?=} content
     * @return {?}
     */
    function (content) {
        var _this = this;
        // console.log("update model", content)
        this.zone.run(function () {
            /** @type {?} */
            var modelContent = null;
            if (_this._hasSpecialTag) {
                /** @type {?} */
                var attributeNodes = _this._$element[0].attributes;
                /** @type {?} */
                var attrs = {};
                for (var i = 0; i < attributeNodes.length; i++) {
                    /** @type {?} */
                    var attrName = attributeNodes[i].name;
                    if (_this._options.angularIgnoreAttrs && _this._options.angularIgnoreAttrs.indexOf(attrName) !== -1) {
                        continue;
                    }
                    attrs[attrName] = attributeNodes[i].value;
                }
                if (_this._$element[0].innerHTML) {
                    attrs[_this.INNER_HTML_ATTR] = _this._$element[0].innerHTML;
                }
                modelContent = attrs;
            }
            else {
                /** @type {?} */
                var returnedHtml = content || '';
                if (typeof returnedHtml === 'string') {
                    modelContent = returnedHtml;
                }
            }
            _this._oldModel = modelContent;
            // Update summernoteModel
            _this.summernoteModelChange.emit(modelContent);
            // Update form model.
            _this.onChange(content);
        });
    };
    /**
     * @private
     * @return {?}
     */
    NgxSummernoteDirective.prototype.initListeners = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this;
        if (!this._$element) {
            return;
        }
        this._$element.on('summernote.init', function () {
            setTimeout(function () {
                self.updateModel();
            }, 0);
        });
        this._$element.on('summernote.change', function (event, contents, $editable) {
            setTimeout(function () {
                self.updateModel(contents);
            }, 0);
        });
        this._$element.on('summernote.blur', function () {
            setTimeout(function () {
                self.onTouched();
                self.blur.emit();
            }, 0);
        });
        if (this._options.immediateAngularModelUpdate) {
            this._editor.on('keyup', function () {
                setTimeout(function () {
                    self.updateModel();
                }, 0);
            });
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxSummernoteDirective.prototype.createEditor = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._editorInitialized) {
            return;
        }
        this.setContent(true);
        // this.initListeners(); // issue #31 
        // init editor
        this.zone.runOutsideAngular(function () {
            _this._editor = _this._$element.summernote(_this._options).data('summernote').$note;
            _this.initListeners(); // issue #31
            if (_this.ngxSummernoteDisabled) {
                _this._$element.summernote('disable');
            }
        });
        this._editorInitialized = true;
    };
    /**
     * @private
     * @return {?}
     */
    NgxSummernoteDirective.prototype.setHtml = /**
     * @private
     * @return {?}
     */
    function () {
        this._$element.summernote('code', this._model || '', true);
    };
    /**
     * @private
     * @param {?=} firstTime
     * @return {?}
     */
    NgxSummernoteDirective.prototype.setContent = /**
     * @private
     * @param {?=} firstTime
     * @return {?}
     */
    function (firstTime) {
        if (firstTime === void 0) { firstTime = false; }
        // console.log("set content", firstTime, this._oldModel, this._model)
        /** @type {?} */
        var self = this;
        // Set initial content
        if (this._model || this._model === '') {
            this._oldModel = this._model;
            if (this._hasSpecialTag) {
                /** @type {?} */
                var tags = this._model;
                // add tags on element
                if (tags) {
                    for (var attr in tags) {
                        if (tags.hasOwnProperty(attr) && attr !== this.INNER_HTML_ATTR) {
                            this._$element.attr(attr, tags[attr]);
                        }
                    }
                    if (tags.hasOwnProperty(this.INNER_HTML_ATTR)) {
                        this._$element[0].innerHTML = tags[this.INNER_HTML_ATTR];
                    }
                }
            }
            else {
                self.setHtml();
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxSummernoteDirective.prototype.destroyEditor = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._editorInitialized) {
            this._editor.off('keyup');
            this._$element.summernote('destroy'); // TODO not sure it works now...
            this._editorInitialized = false;
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxSummernoteDirective.prototype.getEditor = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._$element) {
            return this._$element.summernote.bind(this._$element);
        }
        return null;
    };
    // send manual editor initialization
    // TODO not sure it works now...
    // send manual editor initialization
    // TODO not sure it works now...
    /**
     * @private
     * @return {?}
     */
    NgxSummernoteDirective.prototype.generateManualController = 
    // send manual editor initialization
    // TODO not sure it works now...
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var controls = {
            initialize: this.createEditor.bind(this),
            destroy: this.destroyEditor.bind(this),
            getEditor: this.getEditor.bind(this),
        };
        this.summernoteInit.emit(controls);
    };
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    NgxSummernoteDirective.prototype.uploadImage = /**
     * @private
     * @param {?} files
     * @return {?}
     */
    function (files) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                data = new FormData();
                this.imageUpload.emit({ uploading: true });
                data.append('image', files[0]);
                if (this._options.uploadImagePath) {
                    this.http.post(this._options.uploadImagePath, data)
                        .pipe(map(function (response) { return response && typeof response.path === 'string' && response.path; }), catchError(function (e) {
                        throwError('An error occured while uploading' + e);
                        return of('');
                    }))
                        .subscribe(function (dataIn) {
                        if (dataIn) {
                            _this._$element.summernote('insertImage', dataIn);
                            _this.imageUpload.emit({ uploading: false });
                        }
                        else {
                            _this.insertFromDataURL(files);
                        }
                    }, function (e) {
                        _this.insertFromDataURL(files);
                    });
                }
                else {
                    this.insertFromDataURL(files);
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * @param {?} files
     * @return {?}
     */
    NgxSummernoteDirective.prototype.insertFromDataURL = /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        var _this = this;
        /** @type {?} */
        var reader = new FileReader();
        reader.readAsDataURL(files[0]);
        reader.onload = function () {
            _this._$element.summernote('insertImage', reader.result);
            _this.imageUpload.emit({ uploading: false, encoding: 'base64' });
        };
        reader.onerror = function (error) { return console.error(error); };
    };
    /**
     * @private
     * @return {?}
     */
    NgxSummernoteDirective.prototype.codeBlockButton = /**
     * @private
     * @return {?}
     */
    function () {
        return function (context) {
            /** @type {?} */
            var ui = $.summernote.ui;
            // create button
            /** @type {?} */
            var button = ui.button({
                contents: 'Code block',
                tooltip: 'Add raw code',
                click: function () {
                    /** @type {?} */
                    var selectedText = null;
                    // The below code will copy the selected block and add it into our code=block
                    if (window.getSelection) {
                        selectedText = window.getSelection().toString().replace(/^\s+|\s+$/g, '');
                    }
                    /** @type {?} */
                    var codeText = selectedText ? selectedText : "Place your code here.";
                    /** @type {?} */
                    var codeBlock = "<pre class=\"code-block\" style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 12px; padding: 14px 12px; margin-bottom: 10px; line-height: 1.42857; word-break: break-all; overflow-wrap: break-word; background-color: rgb(250, 251, 253); border: 1px solid rgb(234, 236, 240); border-radius: 4px; color: #60a0b0\"><span style=\"white-space: pre-wrap;\">" + codeText + "</span></pre>";
                    context.invoke('editor.pasteHTML', codeBlock);
                }
            });
            return button.render(); // return button as jquery object
        };
    };
    NgxSummernoteDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[ngxSummernote]',
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return NgxSummernoteDirective; }),
                            multi: true
                        }]
                },] },
    ];
    /** @nocollapse */
    NgxSummernoteDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: HttpClient }
    ]; };
    NgxSummernoteDirective.propDecorators = {
        ngxSummernote: [{ type: Input }],
        summernoteModel: [{ type: Input }],
        summernoteModelChange: [{ type: Output }],
        imageUpload: [{ type: Output }],
        summernoteInit: [{ type: Output }],
        blur: [{ type: Output }],
        ngxSummernoteDisabled: [{ type: Input }]
    };
    return NgxSummernoteDirective;
}());
export { NgxSummernoteDirective };
if (false) {
    /** @type {?} */
    NgxSummernoteDirective.prototype.summernoteModelChange;
    /** @type {?} */
    NgxSummernoteDirective.prototype.imageUpload;
    /** @type {?} */
    NgxSummernoteDirective.prototype.summernoteInit;
    /** @type {?} */
    NgxSummernoteDirective.prototype.blur;
    /** @type {?} */
    NgxSummernoteDirective.prototype.ngxSummernoteDisabled;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._options;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype.SPECIAL_TAGS;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype.INNER_HTML_ATTR;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._hasSpecialTag;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._$element;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._editor;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._model;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._oldModel;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._editorInitialized;
    /** @type {?} */
    NgxSummernoteDirective.prototype.onChange;
    /** @type {?} */
    NgxSummernoteDirective.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,